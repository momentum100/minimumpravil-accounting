# Stack
VERY IMPORTANT - USING `Laravel 12`

-   Laravel 12, PHP 8.3, MySQL 8 
-   Alpine 
-   Laravel directory is in `acne-accounting` folder
-   Windows 11 Pro development, use Windows PowerShell commands and `;` as separator

# Coding

## LLM Coding Agent Guidelines for Laravel + PHP (Breeze & Tailwind)

Below are **comprehensive rules**‚Äîbest practices and "what not to do"‚Äîfor your LLM-powered coding assistant when scaffolding, developing, or reviewing a Laravel (‚â•v10) project using PHP, Breeze authentication, and Tailwind CSS. These guidelines embody SOLID, KISS, and DRY principles.

---

## üìê 1. Architectural & Coding Principles

### 1.1 SOLID Principles

1.  **Single Responsibility**
    ‚Äì One class/module ‚Üí one responsibility.
2.  **Open/Closed**
    ‚Äì Classes open for extension, closed for modification (use inheritance/composition).
3.  **Liskov Substitution**
    ‚Äì Subclasses must be replaceable for their base classes.
4.  **Interface Segregation**
    ‚Äì Interfaces should be granular; avoid "fat" interfaces.
5.  **Dependency Inversion**
    ‚Äì Depend on abstractions (interfaces) rather than concretions.

### 1.2 KISS (Keep It Simple, Stupid)

-   Favour straightforward solutions over over-engineering.
-   Avoid unnecessary patterns, micro-optimizations, or deep inheritance hierarchies.
-   Use Laravel's built-in features (Form Requests, Policies, Resources) before inventing custom abstractions.

### 1.3 DRY (Don't Repeat Yourself)

-   Extract repeated Blade components, Tailwind class groups (`@apply`), and PHP logic into:
    -   **Blade components** (`<x-alert ‚Ä¶/>`)
    -   **View Composers**
    -   **Traits**, **Helper classes**, or **Services**
-   Reuse validation rules via **Form Request** classes.
-   Share configuration values in `config/*.php`.

---

## üõ†Ô∏è 2. Laravel-Specific Practices

### 2.1 Project Structure & Conventions

-   **PSR-12** coding standards; enforce via `php-cs-fixer` or `Laravel Pint`.
-   **Naming:**
    -   Controllers ‚Üí `PascalCaseController` (e.g. `UserController`)
    -   Models ‚Üí singular (`User`), matching DB `users` table.
    -   Routes ‚Üí `snake_case`/URL-friendly.
-   **Route Model Binding**
    ```php
    Route::get('/posts/{post}', [PostController::class, 'show']);
    ```
-   **Thin Controllers**
    -   Delegate to Actions or Service classes for business logic.
    -   One action = one public method.

### 2.2 Validation & Security

-   Use **Form Request** classes for input validation/authorization.
-   Always `authorize()` in Form Requests.
-   Escape output in Blade: `{{ $var }}`; only use `{!! !!}` for trusted HTML.
-   Protect against mass assignment: set `$fillable` or `$guarded` on Eloquent models.

### 2.3 Eloquent & Database

-   **Eager-load** relationships to prevent N+1 queries:
    ```php
    Post::with(['author', 'comments'])->paginate();
    ```
-   Use **Query Scopes** for reusable filters.
-   Migrate schema via Laravel migrations; avoid raw SQL when possible.
-   Use **Seeders & Factories** for test data.

### 2.4 APIs & Resources

-   Return **API Resources** for JSON responses:
    ```php
    return new UserResource($user);
    ```
-   Leverage HTTP Response helpers:
    ```php
    return response()->noContent(); // 204
    ```
-   Version API routes (e.g., `/api/v1/...`).

### 2.5 Testing

-   **Feature Tests** for endpoints; **Unit Tests** for individual classes.
-   Use **Factories** (`User::factory()`) and `RefreshDatabase` trait.
-   Aim >80% coverage on critical paths.

---

## üé® 3. Tailwind CSS & Breeze Frontend

### 3.1 Tailwind Best Practices

-   **Utility-first:** compose small classes for clarity.
-   Extract repeating class sets via `tailwind.config.js` plugins or `@apply` in CSS:
    ```css
    .btn {
        @apply px-4 py-2 rounded-lg bg-blue-600 text-white;
    }
    ```
-   Use variants (`hover:`, `focus:`, `dark:`) for states.
-   Purge unused CSS in production (`NODE_ENV=production npm run build`).

### 3.2 Breeze Scaffolding

-   After `php artisan breeze:install`, organize:
    -   `resources/views/layouts` for base layouts.
    -   Blade components in `resources/views/components`.
-   Customize the Tailwind config (`tailwind.config.js`): add brand colors, spacing scales, etc.

---

## üö´ 4. Bad Practices to Avoid

-   **Fat Controllers & Models**
    ‚Äì Business logic sprawled across controllers/models.
-   **Inline SQL or DB Queries in Views**
    ‚Äì Breaks separation; invite performance issues.
-   **Duplicated Validation Rules**
    ‚Äì Copy-pasting rules across controllers.
-   **Overridden Framework Code**
    ‚Äì Avoid hacking core; extend via Events, Listeners, or Service Providers.
-   **Global Facade Abuse**
    ‚Äì Prefer Dependency Injection over static facades when testability is needed.
-   **Neglecting Migrations & Version Control**
    ‚Äì Hand-editing DB schema outside migrations.
-   **Skipping Cache/Eager-Loading**
    ‚Äì Leads to slow pages and high DB load.
-   **Hard-coded URLs, Credentials, or Magic Strings**
    ‚Äì Always use `config()` or `.env`.

---

## ‚úÖ 5. Summary Checklist

-   [ ] Adhere to SOLID, KISS, DRY.
-   [ ] PSR-12 code style + Laravel conventions.
-   [ ] Thin Controllers ‚Üí Services/Actions.
-   [ ] Form Requests for validation & auth.
-   [ ] Eager-load Eloquent relations.
-   [ ] API Resources for JSON.
-   [ ] Tailwind utility classes + purge.
-   [ ] Extract repeated Blade/Tailwind via components & `@apply`.
-   [ ] Write meaningful tests.
-   [ ] Avoid fat code, duplication, inline queries, and core hacks.
 

 # Tools 
 Use tools
 When you analize logs take 250 last lines


 # logging
 Write logs for everything. 

 # project file structure
 NB! VERY IMPORTANT - laravel folder is `acne-accounting/`